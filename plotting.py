#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun May 26 14:20:22 2024

@author: mateo-drr
"""

import numpy as np

data = [
[[0.8859983682632446, 0.9367848038673401, 0.21797454357147217], [0.8859983682632446, 0.9367848038673401, 0.21797454357147217]],
[[0.6897955536842346, 0.692495584487915, 0.6291518211364746], [0.6842240691184998, 0.6797239780426025, 0.6452234983444214]],
[[0.7366391, 0.7347534, 0.6373376846313477], [0.68970984, 0.68615264, 0.681052565574646]],
[[0.8821411728858948, 0.9320275783538818, 0.21420305967330933], [0.4781211018562317, 0.4747782051563263, 0.32627609372138977]],
[[0.6845240592956543, 0.680881142616272, 0.6520378589630127], [0.6841812133789062, 0.6802811622619629, 0.652423620223999]],
[[0.80401146, 0.8961985, 0.48309260606765747], [0.48977843, 0.47422105, 0.5713367462158203]],
[[0.8818840384483337, 0.9328418970108032, 0.22016029059886932], [0.49753567576408386, 0.507221519947052, 0.2746753394603729]],
[[0.6896669864654541, 0.6900955438613892, 0.644066333770752], [0.6884241104125977, 0.6883812546730042, 0.6459949612617493]],
[[0.7522822, 0.7603823, 0.6205803155899048], [0.6951956, 0.6889813, 0.6870098114013672]],
[[0.8781982660293579, 0.9313418865203857, 0.2164316624403], [0.40299147367477417, 0.37307676672935486, 0.3137187659740448]],
[[0.6884669661521912, 0.6873955130577087, 0.6437663435935974], [0.6841812133789062, 0.6801954507827759, 0.6530236005783081]],
[[0.75262505, 0.7548108, 0.6403805613517761], [0.72905326, 0.73261046, 0.655337929725647]],
[[0.8776839375495911, 0.9333133101463318, 0.21463163197040558], [0.4750353693962097, 0.4705781638622284, 0.41207730770111084]],
[[0.6894527077674866, 0.6864526867866516, 0.6447520852088928], [0.6884241104125977, 0.6844383478164673, 0.6467235088348389]],
[[0.7176531, 0.709853, 0.6647666096687317], [0.69515276, 0.69052416, 0.6759524941444397]],
[[0.8808982968330383, 0.9336990714073181, 0.21788883209228516], [0.48887839913368225, 0.48720696568489075, 0.45656365156173706]],
[[0.6912098526954651, 0.6926670074462891, 0.6399091482162476], [0.6866669654846191, 0.6857240796089172, 0.6492949724197388]],
[[0.7476107, 0.7521536, 0.653795063495636], [0.730039, 0.7293961, 0.6703810095787048]],
[[0.8862555027008057, 0.9368705153465271, 0.22363176941871643], [0.8862555027008057, 0.9368705153465271, 0.22363176941871643]],
[[0.6870955228805542, 0.6838812232017517, 0.6519521474838257], [0.6855098009109497, 0.6814383268356323, 0.655166506767273]],
[[0.67693824, 0.66960955, 0.6606951355934143], [0.62263745, 0.60720867, 0.7086529731750488]],
[[0.8765268325805664, 0.9294132590293884, 0.21437449753284454], [0.49594995379447937, 0.4926927387714386, 0.49054986238479614]],
[[0.6903955936431885, 0.6914670467376709, 0.6375519633293152], [0.6864955425262451, 0.6836240291595459, 0.6468520760536194]],
[[0.7152102, 0.70783865, 0.6870098114013672], [0.7040243, 0.69832426, 0.6899241209030151]],
[[0.8816697597503662, 0.9331847429275513, 0.2206745743751526], [0.8816697597503662, 0.9331847429275513, 0.2206745743751526]],
[[0.6865383982658386, 0.682338297367096, 0.6469377875328064], [0.6860669255256653, 0.6817811727523804, 0.6472806930541992]],
[[0.7147388, 0.7137102, 0.6765096783638], [0.6802383, 0.67080957, 0.7118244767189026]],
[[0.8874555230140686, 0.9385419487953186, 0.2268032431602478], [0.8874555230140686, 0.9385419487953186, 0.2268032431602478]],
[[0.6898812651634216, 0.6881241202354431, 0.6420091986656189], [0.6852955222129822, 0.6792097091674805, 0.6525521874427795]],
[[0.74615353, 0.7620537, 0.6116230487823486], [0.6847812, 0.67672396, 0.6877812743186951]]]


data = np.array(data)

erm,irm,sfb = [],[],[]
for x in range(len(data)):
    if x % 3 == 0:
        erm.append(data[x])
        irm.append(data[x+1])
        sfb.append(data[x+2])
        
erm,irm,sfb = np.array(erm),np.array(irm),np.array(sfb)

a,b,c = [],[],[]
for i in range(0,2):
    a.append([erm[:,i,0].mean(), erm[:,i,0].std()])
    a.append([erm[:,i,1].mean(), erm[:,i,1].std()])
    a.append([erm[:,i,2].mean(), erm[:,i,2].std()])
    
    b.append([irm[:,i,0].mean(), irm[:,i,0].std()])
    b.append([irm[:,i,1].mean(), irm[:,i,1].std()])
    b.append([irm[:,i,2].mean(), irm[:,i,2].std()])
    
    c.append([sfb[:,i,0].mean(), sfb[:,i,0].std()])
    c.append([sfb[:,i,1].mean(), sfb[:,i,1].std()])
    c.append([sfb[:,i,2].mean(), sfb[:,i,2].std()])
    
    
import matplotlib.pyplot as plt
import numpy as np

# Data for ERM
erm_geo_means = [0.8819, 0.9338, 0.2187]
erm_geo_stds = [0.0036, 0.0027, 0.0040]
erm_best_accs = [0.6380, 0.6551, 0.3163]
erm_best_accs_stds = [0.2035, 0.2322, 0.0982]

# Data for IRM
irm_geo_means = [0.6887, 0.6876, 0.6432]
irm_geo_stds = [0.0020, 0.0040, 0.0064]
irm_best_accs = [0.6859, 0.6825, 0.6495]
irm_best_accs_stds = [0.0015, 0.0028, 0.0034]

# Data for SFB
sfb_geo_means = [0.7364, 0.7461, 0.6336]
sfb_geo_stds = [0.0318, 0.0574, 0.0549]
sfb_best_accs = [0.6721, 0.6655, 0.6739]
sfb_best_accs_stds = [0.0670, 0.0717, 0.0377]

# Indices for the bars
indices = np.arange(3)
width = 0.25
y_min=0.0
y_max=0.95

# Plot for geometric means
plt.figure(figsize=(10, 6), dpi=300)
plt.bar(indices - width, erm_geo_means, width, yerr=erm_geo_stds, label='ERM', capsize=5)
plt.bar(indices, irm_geo_means, width, yerr=irm_geo_stds, label='IRM', capsize=5)
plt.bar(indices + width, sfb_geo_means, width, yerr=sfb_geo_stds, label='SFB', capsize=5)
plt.xticks(indices, ['Train1', 'Train2', 'Test'])
plt.ylabel('Accuracy')
plt.ylim([y_min, y_max])
#plt.title('Geometric Mean Accuracy for ERM, IRM, and SFB')
plt.legend()
plt.show()

# Plot for best test accuracies
plt.figure(figsize=(10, 6), dpi=300)
plt.bar(indices - width, erm_best_accs, width, yerr=erm_best_accs_stds, label='ERM', capsize=5)
plt.bar(indices, irm_best_accs, width, yerr=irm_best_accs_stds, label='IRM', capsize=5)
plt.bar(indices + width, sfb_best_accs, width, yerr=sfb_best_accs_stds, label='SFB', capsize=5)
plt.xticks(indices, ['Train1', 'Train2', 'Test'])
plt.ylabel('Accuracy')
plt.ylim([y_min, y_max])

#plt.title('Best Test Accuracy for ERM, IRM, and SFB')
plt.legend()
plt.show()

